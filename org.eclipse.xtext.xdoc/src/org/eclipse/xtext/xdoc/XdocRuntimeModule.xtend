/*
 * generated by Xtext
 */
package org.eclipse.xtext.xdoc

import org.eclipse.xtext.common.types.xtext.TypesAwareDefaultGlobalScopeProvider
import org.eclipse.xtext.formatting.IFormatter
import org.eclipse.xtext.generator.OutputConfigurationProvider
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.resource.IResourceDescription
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.xdoc.formatting.NullFormatter
import org.eclipse.xtext.xdoc.generator.XdocOutputConfigurationProvider
import org.eclipse.xtext.xdoc.naming.XdocDocumentNameProvider
import org.eclipse.xtext.xdoc.resource.XdocResourceDescriptionManager
import org.eclipse.xtext.xdoc.resource.XdocResourceDescriptionStrategy

/** 
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("restriction") class XdocRuntimeModule extends AbstractXdocRuntimeModule {
	override Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return XdocDocumentNameProvider
	}

	override Class<? extends IFormatter> bindIFormatter() {
		return NullFormatter
	}

	def Class<? extends IResourceDescription.Manager> bindIResourceDescription$Manager() {
		return XdocResourceDescriptionManager
	}

	def Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return XdocResourceDescriptionStrategy
	}

	def Class<? extends OutputConfigurationProvider> bindOutputConfigurationProvider() {
		return XdocOutputConfigurationProvider
	}

	override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return TypesAwareDefaultGlobalScopeProvider
	}
}

/*
 * generated by Xtext
 */
package org.eclipse.xtext.xdoc;

import org.eclipse.xtext.common.types.xtext.TypesAwareDefaultGlobalScopeProvider;
import org.eclipse.xtext.generator.OutputConfigurationProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.xdoc.generator.XdocOutputConfigurationProvider;
import org.eclipse.xtext.xdoc.naming.XdocDocumentNameProvider;
import org.eclipse.xtext.xdoc.resource.XdocResourceDescriptionManager;
import org.eclipse.xtext.xdoc.resource.XdocResourceDescriptionStrategy;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("restriction")
public class XdocRuntimeModule extends org.eclipse.xtext.xdoc.AbstractXdocRuntimeModule {

	@Override
	public Class<? extends org.eclipse.xtext.naming.IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return XdocDocumentNameProvider.class;
	}

	@Override
	public Class<? extends org.eclipse.xtext.formatting.IFormatter> bindIFormatter() {
		return org.eclipse.xtext.xdoc.formatting.NullFormatter.class;
	}

	public Class<? extends IResourceDescription.Manager> bindIResourceDescription$Manager() {
		return XdocResourceDescriptionManager.class;
	}

	public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return XdocResourceDescriptionStrategy.class;
	}
	
	public Class<? extends OutputConfigurationProvider> bindOutputConfigurationProvider() {
		return XdocOutputConfigurationProvider.class;
	}
	
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return TypesAwareDefaultGlobalScopeProvider.class;
	}
}
